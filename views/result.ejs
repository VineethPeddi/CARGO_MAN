<!DOCTYPE html>
<html>
    <head>
        <title>CARGO MANAGEMENT</title>
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" 
        integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    </head>
    <body>
        <script type="text/javascript">
            
            var lenShip = <%= ship.lenShip %>;
            var widShip = <%= ship.widShip %>;
            var capShip = <%= ship.capShip %>;
            var levShip = <%= ship.levShip %>;
            var noDes   = <%= ship.noDes %>;
            
            var conLen = [];
            var conID = [];
            var conWeight = [];
            var conDest = [];
            <%for(var i=0;i<ship.containers.length;i++) {%>
                conLen.push(<%=ship.containers[i].length%>);
                conID.push(<%=ship.containers[i].id%>);
                conWeight.push(<%=ship.containers[i].weight%>);
                conDest.push(<%=ship.containers[i].destination%>);
            <%}%>
            
            var con = [];

            for(var i=0;i<conLen.length;i++) {
                con.push({
                    length: conLen[i],
                    id    : conID[i],
                    weight: conWeight[i],
                    destination : conDest[i]
                });
            }

            var destCon = [[],[],[],[],[],[],[],[],[],[]];

            for(var i=0;i<con.length;i++) {
                destCon[con[i].destination].push(con[i]);
            }
            
            var noRows = Math.floor(widShip/8);
            var noCols = Math.floor(lenShip/10);
            
            // Function to create a n-dimensional array
            function createArray(length) {
                var arr = new Array(length || 0),
                    i = length;

                if (arguments.length > 1) {
                    var args = Array.prototype.slice.call(arguments, 1);
                    while(i--) arr[length-1 - i] = createArray.apply(this, args);
                }

                return arr;
            }

            var ship = createArray(levShip,noRows,noCols);
            
            for(var h = levShip-1;h>=0;h--) {
                //cout<<"Level -"<<h<<endl;
                for(var r = 0;r<noRows;r++) {
                    for(var c = 0;c < noCols;c++) {
                        ship[h][r][c] = 0;
                    }
                    //cout<<endl;
                }
               // cout<<"========================================="<<endl;
            }
            
            // Comparator function for sort
            function compareValues(key, order = 'asc') {
                return function innerSort(a, b) {
                    if (!a.hasOwnProperty(key) || !b.hasOwnProperty(key)) {
                    // property doesn't exist on either object
                    return 0;
                    }

                    const varA = (typeof a[key] === 'string')
                    ? a[key].toUpperCase() : a[key];
                    const varB = (typeof b[key] === 'string')
                    ? b[key].toUpperCase() : b[key];

                    let comparison = 0;
                    if (varA > varB) {
                    comparison = 1;
                    } else if (varA < varB) {
                    comparison = -1;
                    }
                    return (
                    (order === 'desc') ? (comparison * -1) : comparison
                    );
                };
            }

            var weight1 = 0;
            var weight2 = 0;

            if(noRows%2 === 0) {
                var mid = noRows/2;
                var row1 = mid-1;
                var row2 = mid;
                var col1 = 0;
                var col2 = 0;
                var height1 = levShip-1;
                var height2 = levShip-1;

                for(var i=noDes;i>=1;i--) {
                    var vec = [];
                    vec = destCon[i];
                    vec.sort(compareValues('length','desc'));
                    
                    for(var j=0;j<vec.length;j++) {
                        if(weight1 <= weight2) {
                            if(col1 + (vec[j].length/10) <= noCols) {
                                for(var k=0;k<(vec[j].length)/10;k++) {
                                    ship[height1][row1][col1+k] = vec[j].id;
                                }
                                col1 = col1 + vec[j].length/10;
                                weight1 = weight1 + vec[j].weight;
                            }
                            else {
                                row1 = row1 - 1;
                                if(row1 < 0) {
                                    row1 = mid-1;
                                    height1 = height1 - 1;
                                }
                                col1 = 0;
                                for(var k=0;k<(vec[j].length)/10;k++) {
                                    ship[height1][row1][col1+k] = vec[j].id;
                                }
                                col1 = col1 + (vec[j].length)/10;
                                weight1 = weight1 + vec[j].weight;
                            }
                        }
                        else {
                            if(col2 + vec[j].length/10 <= noCols) {
                                for(var k=0;k<vec[j].length/10;k++) {
                                    ship[height2][row2][col2+k] = vec[j].id;   
                                }
                                col2 = col2 + vec[j].length/10;
                                weight2 = weight2 + vec[j].weight;
                            }
                            else {
                                row2 = row2 + 1;
                                if(row2 === noRows) {
                                    height2 = height2 - 1;
                                    row2 = mid;
                                }
                                col2 = 0;
                                for(var k=0;k<vec[j].length/10;k++) {
                                    ship[height2][row2][col2+k] = vec[j].id;
                                }
                                col2 = col2 + vec[j].length/10;
                                weight2 = weight2 + vec[j].weight;
                            }
                        }
                    }
                }
            }
            else {
                var mid = Math.floor(noRows/2);
                var row1 = mid;
                var row2 = mid+1;
                var col1 = 0;
                var col2 = 0;
                var height1 = levShip-1;
                var height2 = levShip-1;

                for(var i=noDes;i>=1;i--) {
                    var vec = [];
                    vec = destCon[i];
                    vec.sort(compareValues('length','desc'));
                    for(var j=0;j<vec.length;j++) {
                        if(weight1 <= weight2) {
                            if(col1 + vec[j].length/10 <= noCols) {
                                for(var k=0;k<(vec[j].length)/10;k++) {
                                    ship[height1][row1][col1+k] = vec[j].id;
                                }
                                col1 = col1 + vec[j].length/10;
                                weight1 = weight1 + vec[j].weight;
                            }
                            else {
                                row1 = row1 - 1;
                                if(row1 < 0) {
                                    row1 = mid;
                                    height1 = height1 - 1;
                                }
                                col1 = 0;
                                for(var k=0;k<(vec[j].length)/10;k++) {
                                    ship[height1][row1][col1+k] = vec[j].id;
                                }
                                col1 = col1 + vec[j].length/10;
                                weight1 = weight1 + vec[j].weight;
                            }
                        }
                        else {
                            if(col2 + vec[j].length/10 <= noCols) {
                                for(var k=0;k<vec[j].length/10;k++) {
                                    ship[height2][row2][col2+k] = vec[j].id;   
                                }
                                col2 = col2 + vec[j].length/10;
                                weight2 = weight2 + vec[j].weight;
                            }
                            else {
                                row2 = row2 + 1;
                                if(row2 === noRows) {
                                    height2 = height2 - 1;
                                    row2 = mid+1;
                                }
                                col2 = 0;
                                for(var k=0;k<vec[j].length/10;k++) {
                                    ship[height2][row2][col2+k] = vec[j].id;
                                }
                                col2 = col2 + vec[j].length/10;
                                weight2 = weight2 + vec[j].weight;
                            }
                        }
                    }
                }
            }
            
            for(var h = levShip-1;h>=0;h--) {
                document.writeln('<table class="table table-striped">');
                document.writeln('<h2 class = "display-3 text-center">Level ' + (levShip - 1 - h) + "</h2>");
                for(var r = 0;r<noRows;r++) {
                    document.writeln("<tr>");
                    
                    for(var c = 0;c < noCols;c++) {
                 
                        document.writeln("<td>" + ship[h][r][c] + "</td>");
                    }
                    
                    document.writeln("</tr>");
                   // document.writeln("<br>");
                    
                }
                
                document.writeln("</table>");
                //document.writeln("<br>");
                //document.writeln("<br>");
            }

            // document.writeln(lenShip);
            // document.writeln(widShip);
            // document.writeln(capShip);
            // document.writeln(levShip);
            // document.writeln(noDes);
            



        </script>
    </body>

</html>
